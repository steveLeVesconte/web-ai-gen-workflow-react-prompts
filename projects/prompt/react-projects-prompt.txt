# Role
You are a professional UI/UX designer and React developer tasked with adding new pages and components to an existing Full Stack Developer Portfolio React web application

# Context
## Developer Name:
- John Doe
## site map:
src/
├── components/
│   ├── Footer.tsx
│   ├── ProjectList.tsx  - new to be created
│   ├── ProjectRow.tsx   - new to be created
│   ├── Header.tsx
│   ├── Layout.tsx
│   ├── NavBar.tsx
│   └── SkillsList.tsx
├── models/
│   └── Project.ts 
├── pages/
│   ├── HomePage.tsx  
│   ├── ContactPage.tsx  
│   ├── ProjectListPage.tsx   -  new to be created
│   ├── ProjectContainerPage.tsx   -  new to be created
│   ├── AboutMePage.tsx
│   └── /projects  
│         ├── ProjectPage0001.tsx  - for reference
│         ├── ProjectPage0002.tsx  - for reference
│         ├── ProjectPage0003.tsx  - for reference
│         └── ProjectPage0004.tsx  - for reference
├── services/
│   └── ProjectDataService.ts  - to be updated
├── styles/
│   ├── styles.css
│   ├── home.css  
│   └── aboutMe.css
├── App.tsx
└── main.tsx

# Attached Context Files:
- DesignSystemDocument.md
- styles.css
- App.tsx
- ProjectDataService

# Constraints:
- Reuse existing CSS and JavaScript whenever possible from these files:
  -- styles.css
  -- projects.css
- Employ CSS best practices to create, name and reuse CSS variables.
- Employ best practices to support responsive design.
- Organize and comment the CSS file to allow you (the AI) and developers to easily apply the styles and CSS variables.
- Create a new CSS class to cascade over the main element so that the Hero Image can be full width as follows:
  -- max-width: 1280px;

- When crafting components and pages, follow best practices for:
  -- file naming 
  -- variable naming
  -- function naming
  -- placement in folders

- Prefer function components instead of class components.
- Use TypeScript.
- If more components are needed to complete the ProjectListPage.tsx, create them.
- Use best and latest practices and conventions when designing the paths for the routes.
- Assume that the included 'styles.css' and 'projects.css' will be the main style source.  If more styles are needed then deliver supplemental stylesheets or a component.css file.
- Assume that the files you create will be used in an existing Vite React website.
- Create an aspect-ratio-box for each image to hold space while the image loads.
  -- aspect-ratio: 16/9

# ProjectListPage Layout:
- Page Title 
- Intro Paragraph
- ProjectList Component  (show 6 projects to start) (ProjectList.tsx)
  -- row:  (ProjectRow.tsx)
      --- height: 350px
      --- Text Section (on left):
          ---- Project Title
          ---- color: default text color
          ---- Project Date
          ---- short paragraph about project (just one sentence) (listPageDescription)
          ---- button Link: "Learn More"
      --- Image (on right)
            ---- Placeholder: src="https://picsum.photos/600/600" "
- Show More button 
  -- centered
  -- Text: Show More
  -- margin-bottom: 32px
  -- causes next 6 projects to be appended to bottom of list

# ProjectContainerPage Layout:
 - suspense
   -- ProjectPage Component (lazy loaded)
  - button row
    -- next button on right
    -- previouse botton on left

# ProjectContainerPage Logic
- provide logic to convert an id parameter into a project component name:
  -- Exaple project component names:
     --- ProjectPage0001
     --- ProjectPage0002
- provide logic for next and previous buttons
- return a lazy laoaded ProjectPage Component as shown in layout

# Data Design
export interface Project {
  id: string;  
  title: string;
  listPageDescription: string;   // used on Projects Page
  homePageDescription: string;   // used on Home Page
  listPageImageUrl: string;      // used on Projects Page
  homePageImageUrl: string;      // used on Home Page
  isFeatured: boolean; // is featured on the Home Page
  projectDate: Date; // the date the project was completed
  isHidden: boolean; // is hidden from both the project List Page and the Home Page
  featureOrder?: number; // the order in which the project appears on the Home Page
}

#AI Task:
-  Using the attached context files, create new components for an existing react application for a ProjectListPage that is compatible with the attached DesignSystemDocument.md and styles.css.  
-  Update ProjectDataService.ts: 
   -- add paged method for reteiving projects:
      --- first 6  - (on load)
      --- next 6  - (on Show More button click)
      --- filter to exclude "isHidden"
      --- order by "featureOrder"
    -- add more items to 'projects' array (must be at least 12 items)
-  Create a ProjectContainerPage: 
   -- convert an id parameter to a ProjectPage name 
   -- return a lazy loaded ProjectPage

## Deliverables
At least the following pages and components:
  -- ProjectListPage.tsx
  -- ProjectList.tsx
  -- ProjectRow.tsx
  -- ProjectContanerPage.tsx
  -- App.tsx (with updated route id => ProjectContanerPage )
  -- ProjectDataService.ts  (updated)
  -- Projects.css 